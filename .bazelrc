# Build with --config=local to send build logs to your local server
build:local --bes_results_url=http://localhost:8080/invocation/
build:local --bes_backend=grpc://localhost:1985
build:local --remote_cache=grpc://localhost:1985
build:local --remote_upload_local_results

# Build with --config=dev to send build logs to the dev server
build:dev --bes_results_url=https://app.buildbuddy.dev/invocation/
build:dev --bes_backend=grpcs://cloud.buildbuddy.dev

# Build with --config=dev-cache to send build logs to the dev server with cache
build:dev-cache --bes_results_url=https://app.buildbuddy.dev/invocation/
build:dev-cache --bes_backend=grpcs://cloud.buildbuddy.dev
build:dev-cache --remote_cache=grpcs://cloud.buildbuddy.dev
build:dev-cache --remote_upload_local_results

# Build with --config=cache to send build logs to the production server with cache
build:cache --bes_results_url=https://app.buildbuddy.io/invocation/
build:cache --bes_backend=grpcs://cloud.buildbuddy.io
build:cache --remote_cache=grpcs://cloud.buildbuddy.io
build:cache --remote_upload_local_results

# By default, build logs get sent to the production server
build --bes_results_url=https://app.buildbuddy.io/invocation/
build --bes_backend=grpcs://cloud.buildbuddy.io

# Recommended if connecting to a remote (upload speed constrained) BuildBuddy instance
build --noremote_upload_local_results # Uploads logs & artifacts without writing to cache

# This .bazelrc file contains all of the flags required for the provided
# toolchain with Remote Build Execution.
# Note your WORKSPACE must contain an rbe_autoconfig target with
# name="rbe_default" to use these flags as-is.

# Depending on how many machines are in the remote execution instance, setting
# this higher can make builds faster by allowing more jobs to run in parallel.
# Setting it too high can result in jobs that timeout, however, while waiting
# for a remote machine to execute them.
build:remote --jobs=50

# Set several flags related to specifying the platform, toolchain and java
# properties.
# These flags should only be used as is for the rbe-ubuntu16-04 container
# and need to be adapted to work with other toolchain containers.
build:remote --host_javabase=@rbe_default//java:jdk
build:remote --javabase=@rbe_default//java:jdk
build:remote --host_java_toolchain=@bazel_tools//tools/jdk:toolchain_hostjdk8
build:remote --java_toolchain=@bazel_tools//tools/jdk:toolchain_hostjdk8
build:remote --crosstool_top=@rbe_default//cc:toolchain
build:remote --action_env=BAZEL_DO_NOT_DETECT_CPP_TOOLCHAIN=1
# Platform flags:
# The toolchain container used for execution is defined in the target indicated
# by "extra_execution_platforms", "host_platform" and "platforms".
# More about platforms: https://docs.bazel.build/versions/master/platforms.html
build:remote --extra_toolchains=@rbe_default//config:cc-toolchain
build:remote --extra_execution_platforms=@rbe_default//config:platform
build:remote --host_platform=@rbe_default//config:platform
build:remote --platforms=@rbe_default//config:platform

build:remote --spawn_strategy=remote
build:remote --strategy=Javac=remote
build:remote --strategy=Closure=remote
build:remote --strategy=Genrule=remote
build:remote --define=EXECUTOR=remote

# Starting with Bazel 0.27.0 strategies do not need to be explicitly
# defined. See https://github.com/bazelbuild/bazel/issues/7480
build:remote --define=EXECUTOR=remote

# Enable remote execution so actions are performed on the remote systems.
build:remote --remote_executor=grpcs://cloud.buildbuddy.dev
build:remote --bes_results_url=https://app.buildbuddy.dev/invocation/

# Enforce stricter environment rules, which eliminates some non-hermetic
# behavior and therefore improves both the remote cache hit rate and the
# correctness and repeatability of the build.
build:remote --incompatible_strict_action_env=true

# Set a higher timeout value, just in case.
build:remote --remote_timeout=3600